pipeline {
    agent any  // Use any available agent (or 'master' if required)

    environment {
        POLITE_ID = "2133506a"  
        CONTAINER_NAME = "server1-${POLITE_ID}"
        IMAGE_NAME = "svr-image-${POLITE_ID}"
    }

    stages {
        // Stage 1: Setup Release Environment
        stage("ST1-${POLITE_ID}") {
            steps {
                echo "ST1-${POLITE_ID}: Setup Release Environment Completed."
            }
        }

        // Stage 2: Create and Run Container
        stage("ST2-${POLITE_ID}") {
            steps {
                script {
                    sh "docker rm -f ${CONTAINER_NAME} || true"  // Remove old container
                    sh "docker run -d --name ${CONTAINER_NAME} -p 32700:80 ${IMAGE_NAME}"
                    echo "ST2-${POLITE_ID}: Server1 is successfully created"
                }
            }
        }

        // Stage 3: Health Check
        stage("ST3-${POLITE_ID}") {
            steps {
                script {
                    timeout(time: 30, unit: 'SECONDS') {
                        waitUntil {
                            sh(
                                script: "docker inspect --format='{{.State.Health.Status}}' ${CONTAINER_NAME} | grep -q 'healthy'",
                                returnStatus: true
                            ) == 0
                        }
                    }
                    echo "ST3-${POLITE_ID}: Server1 is healthy â€“ Health check done"
                }
            }
        }

        // Stage 4: Parallel Security Checks
        stage("ST4-Parallel-${POLITE_ID}") {
            parallel {
                stage("ST4A-${POLITE_ID}") {
                    steps {
                        echo "ST4A-${POLITE_ID}: SQLI Check Completed"
                    }
                }
                stage("ST4B-${POLITE_ID}") {
                    steps {
                        echo "ST4B-${POLITE_ID}: XSS Check Completed"
                    }
                }
            }
        }

        // Stage 5: Manual Approval
        stage("ST5-${POLITE_ID}") {
            steps {
                script {
                    def userInput = input(
                        id: 'pipelineContinuePrompt',
                        message: 'Continue the pipeline?',
                        parameters: [
                            choice(
                                name: 'choice',
                                choices: ['Proceed', 'Abort'],
                                description: 'Select an option to continue or abort.'
                            )
                        ]
                    )
                    if (userInput != 'Proceed') {
                        error "Pipeline aborted by user at ST5-${POLITE_ID}."
                    }
                }
            }
        }

        // Stage 6: Finalization
        stage("ST6-${POLITE_ID}") {
            steps {
                echo "ST6-${POLITE_ID}: Ready for next phase"
            }
        }
    }

    post {
        always {
            echo "Pipeline ${currentBuild.currentResult}"
            sh "docker rm -f ${CONTAINER_NAME} || true"  // Cleanup container
        }
    }
}
