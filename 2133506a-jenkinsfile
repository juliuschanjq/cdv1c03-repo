pipeline {
    agent any

    environment {
        CONTAINER_NAME = "server1-2133506a"
        IMAGE_NAME = "svr-image-2133506a"
    }

    stages {
        // Stage 1
        stage('ST1-2133506a') {
            steps {
                echo 'ST1-2133506a: Setup Release Environment Completed.'
            }
        }

        // Stage 2
        stage('ST2-2133506a') {
            steps {
                script {
                    sh "docker rm -f ${CONTAINER_NAME} || true"
                    sh "docker run -d --name ${CONTAINER_NAME} -p 32700:80 ${IMAGE_NAME}"
                    echo 'ST2-2133506a: Server1 is successfully created'
                }
            }
        }

        // Stage 3
        stage('ST3-2133506a') {
            steps {
                script {
                    timeout(time: 30, unit: 'SECONDS') {
                        waitUntil {
                            sh(
                                script: "docker inspect --format='{{.State.Health.Status}}' ${CONTAINER_NAME} | grep -q 'healthy'",
                                returnStatus: true
                            ) == 0
                        }
                    }
                    echo 'ST3-2133506a: Server1 is healthy â€“ Health check done'
                }
            }
        }

        // Stage 4 (Parallel)
        stage('ST4-Parallel-2133506a') {
            parallel {
                stage('ST4A-2133506a') {
                    steps {
                        echo 'ST4A-2133506a: SQLI Check Completed'
                    }
                }
                stage('ST4B-2133506a') {
                    steps {
                        echo 'ST4B-2133506a: XSS Check Completed'
                    }
                }
            }
        }

        // Stage 5
        stage('ST5-2133506a') {
            steps {
                script {
                    def userInput = input(
                        id: 'pipelineContinuePrompt',
                        message: 'Continue the pipeline?',
                        parameters: [
                            choice(
                                name: 'choice',
                                choices: ['Proceed', 'Abort'],
                                description: 'Select an option to continue or abort.'
                            )
                        ]
                    )
                    if (userInput != 'Proceed') {
                        error 'Pipeline aborted by user at ST5-2133506a.'
                    }
                }
            }
        }

        // Stage 6
        stage('ST6-2133506a') {
            steps {
                echo 'ST6-2133506a: Ready for next phase'
            }
        }
    }

    post {
        always {
            echo "Pipeline ${currentBuild.currentResult}"
            sh "docker rm -f ${CONTAINER_NAME} || true"
        }
    }
}
